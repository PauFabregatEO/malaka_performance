jacobi_jit (Array(float64, 2, 'C', False, aligned=True), Array(bool, 2, 'C', False, aligned=True), int64, float64)
--------------------------------------------------------------------------------
# File: /zhome/2c/a/213957/malaka_performance/source_MMB/ex7/jit_implementation.py
# --- LINE 21 --- 
# label 0
#   u = arg(0, name=u)  :: array(float64, 2d, C)
#   interior_mask = arg(1, name=interior_mask)  :: array(bool, 2d, C)
#   max_iter = arg(2, name=max_iter)  :: int64
#   atol = arg(3, name=atol)  :: float64

@njit(cache=True)

# --- LINE 22 --- 

def jacobi_jit(u, interior_mask, max_iter, atol=1e-6):

    # --- LINE 23 --- 
    #   $6load_method.2 = getattr(value=u, attr=copy)  :: BoundFunction(array.copy for array(float64, 2d, C))
    #   del u
    #   u.1 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, varkwarg=None, target=None)  :: () -> array(float64, 2d, C)
    #   del $6load_method.2
    #   u.1.2 = u.1  :: array(float64, 2d, C)

    u = u.copy()

    # --- LINE 24 --- 
    #   $46load_attr.5 = getattr(value=u.1, attr=shape)  :: UniTuple(int64 x 2)
    #   $const56.6 = const(int, 0)  :: Literal[int](0)
    #   $58binary_subscr.7 = static_getitem(value=$46load_attr.5, index=0, index_var=$const56.6, fn=<built-in function getitem>)  :: int64
    #   del $const56.6
    #   del $46load_attr.5
    #   $const68.8 = const(int, 2)  :: Literal[int](2)
    #   SIZE = $58binary_subscr.7 - $const68.8  :: int64
    #   del $const68.8
    #   del $58binary_subscr.7

    SIZE = u.shape[0] - 2

    # --- LINE 25 --- 
    #   $76load_global.10 = global(np: <module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)  :: Module(<module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)
    #   $88load_attr.12 = getattr(value=$76load_global.10, attr=empty_like)  :: Function(<built-in function empty_like>)
    #   del $76load_global.10
    #   u_new = call $88load_attr.12(u.1, func=$88load_attr.12, args=[Var(u.1, jit_implementation.py:23)], kws=(), vararg=None, varkwarg=None, target=None)  :: (Array(float64, 2, 'C', False, aligned=True), omitted(default=None)) -> array(float64, 2d, C)
    #   del u.1
    #   del $88load_attr.12

    u_new = np.empty_like(u)

    # --- LINE 26 --- 
    #   $116load_global.15 = global(np: <module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)  :: Module(<module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)
    #   $128load_attr.17 = getattr(value=$116load_global.15, attr=empty)  :: Function(<built-in function empty>)
    #   del $116load_global.15
    #   $const_512 = const(int, 512)  :: Literal[int](512)
    #   $const_512.1 = const(int, 512)  :: Literal[int](512)
    #   $const138.18 = build_tuple(items=[Var($const_512, jit_implementation.py:26), Var($const_512.1, jit_implementation.py:26)])  :: UniTuple(Literal[int](512) x 2)
    #   del $const_512.1
    #   del $const_512
    #   $140load_global.19 = global(np: <module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)  :: Module(<module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)
    #   $152load_attr.20 = getattr(value=$140load_global.19, attr=float32)  :: class(float32)
    #   del $140load_global.19
    #   delta = call $128load_attr.17($const138.18, func=$128load_attr.17, args=[Var($const138.18, jit_implementation.py:26)], kws=[('dtype', Var($152load_attr.20, jit_implementation.py:26))], vararg=None, varkwarg=None, target=None)  :: (UniTuple(int64, 2), class(float32)) -> array(float32, 2d, C)
    #   del $const138.18
    #   del $152load_attr.20
    #   del $128load_attr.17

    delta =np.empty((512, 512), dtype=np.float32)

# --- LINE 27 --- 



    # --- LINE 28 --- 
    #   $180load_global.22 = global(range: <class 'range'>)  :: Function(<class 'range'>)
    #   $198call.25 = call $180load_global.22(max_iter, func=$180load_global.22, args=[Var(max_iter, jit_implementation.py:21)], kws=(), vararg=None, varkwarg=None, target=None)  :: (int64,) -> range_state_int64
    #   del max_iter
    #   del $180load_global.22
    #   $208get_iter.26 = getiter(value=$198call.25)  :: range_iter_int64
    #   del $198call.25
    #   $phi210.0 = $208get_iter.26  :: range_iter_int64
    #   del $208get_iter.26
    #   jump 210
    # label 210
    #   $210for_iter.1 = iternext(value=$phi210.0)  :: pair<int64, bool>
    #   $210for_iter.2 = pair_first(value=$210for_iter.1)  :: int64
    #   $210for_iter.3 = pair_second(value=$210for_iter.1)  :: bool
    #   del $210for_iter.1
    #   $phi212.1 = $210for_iter.2  :: int64
    #   del $210for_iter.2
    #   branch $210for_iter.3, 212, 628
    # label 212
    #   del $210for_iter.3
    #   it = $phi212.1  :: int64
    #   del it
    #   del $phi212.1

    for it in range(max_iter):

        # --- LINE 29 --- 
        #   $214load_global.2 = global(range: <class 'range'>)  :: Function(<class 'range'>)
        #   $const226.4 = const(int, 1)  :: Literal[int](1)
        #   $const230.6 = const(int, 1)  :: Literal[int](1)
        #   $binop_add232.7 = SIZE + $const230.6  :: int64
        #   del $const230.6
        #   $240call.8 = call $214load_global.2($const226.4, $binop_add232.7, func=$214load_global.2, args=[Var($const226.4, jit_implementation.py:29), Var($binop_add232.7, jit_implementation.py:29)], kws=(), vararg=None, varkwarg=None, target=None)  :: (int64, int64) -> range_state_int64
        #   del $const226.4
        #   del $binop_add232.7
        #   del $214load_global.2
        #   $250get_iter.9 = getiter(value=$240call.8)  :: range_iter_int64
        #   del $240call.8
        #   $phi252.1 = $250get_iter.9  :: range_iter_int64
        #   del $250get_iter.9
        #   jump 252
        # label 252
        #   $252for_iter.2 = iternext(value=$phi252.1)  :: pair<int64, bool>
        #   $252for_iter.3 = pair_first(value=$252for_iter.2)  :: int64
        #   $252for_iter.4 = pair_second(value=$252for_iter.2)  :: bool
        #   del $252for_iter.2
        #   $phi254.2 = $252for_iter.3  :: int64
        #   del $252for_iter.3
        #   branch $252for_iter.4, 254, 570
        # label 254
        #   del $252for_iter.4
        #   i = $phi254.2  :: int64
        #   del $phi254.2

        for i in range(1, SIZE + 1):

            # --- LINE 30 --- 
            #   $256load_global.3 = global(range: <class 'range'>)  :: Function(<class 'range'>)
            #   $const268.5 = const(int, 1)  :: Literal[int](1)
            #   $const272.7 = const(int, 1)  :: Literal[int](1)
            #   $binop_add274.8 = SIZE + $const272.7  :: int64
            #   del $const272.7
            #   $282call.9 = call $256load_global.3($const268.5, $binop_add274.8, func=$256load_global.3, args=[Var($const268.5, jit_implementation.py:30), Var($binop_add274.8, jit_implementation.py:30)], kws=(), vararg=None, varkwarg=None, target=None)  :: (int64, int64) -> range_state_int64
            #   del $const268.5
            #   del $binop_add274.8
            #   del $256load_global.3
            #   $292get_iter.10 = getiter(value=$282call.9)  :: range_iter_int64
            #   del $282call.9
            #   $phi294.2 = $292get_iter.10  :: range_iter_int64
            #   del $292get_iter.10
            #   jump 294
            # label 294
            #   $294for_iter.3 = iternext(value=$phi294.2)  :: pair<int64, bool>
            #   $294for_iter.4 = pair_first(value=$294for_iter.3)  :: int64
            #   $294for_iter.5 = pair_second(value=$294for_iter.3)  :: bool
            #   del $294for_iter.3
            #   $phi296.3 = $294for_iter.4  :: int64
            #   del $294for_iter.4
            #   branch $294for_iter.5, 296, 568
            # label 296
            #   del $294for_iter.5
            #   j = $phi296.3  :: int64
            #   del $phi296.3
            # label 568
            #   del i
            #   del $phi296.3
            #   del $phi294.2
            #   del $294for_iter.5
            #   jump 252
            # label 629
            #   jump 294

            for j in range(1, SIZE + 1):

                # --- LINE 31 --- 

                # Check if cell is inside the mask

                # --- LINE 32 --- 
                #   $const302.6 = const(int, 1)  :: Literal[int](1)
                #   $binop_sub304.7 = i - $const302.6  :: int64
                #   del $const302.6
                #   $const310.9 = const(int, 1)  :: Literal[int](1)
                #   $binop_sub312.10 = j - $const310.9  :: int64
                #   del $const310.9
                #   $316build_tuple.11 = build_tuple(items=[Var($binop_sub304.7, jit_implementation.py:32), Var($binop_sub312.10, jit_implementation.py:32)])  :: UniTuple(int64 x 2)
                #   del $binop_sub312.10
                #   del $binop_sub304.7
                #   $318binary_subscr.12 = getitem(value=interior_mask, index=$316build_tuple.11, fn=<built-in function getitem>)  :: bool
                #   del $316build_tuple.11
                #   bool328 = global(bool: <class 'bool'>)  :: Function(<class 'bool'>)
                #   $328pred = call bool328($318binary_subscr.12, func=bool328, args=(Var($318binary_subscr.12, jit_implementation.py:32),), kws=(), vararg=None, varkwarg=None, target=None)  :: (bool,) -> bool
                #   del bool328
                #   del $318binary_subscr.12
                #   branch $328pred, 330, 536

                if interior_mask[i - 1, j - 1]:

                    # --- LINE 33 --- 
                    # label 330
                    #   del $328pred
                    #   $const330.3 = const(float, 0.25)  :: float64
                    #   $const336.6 = const(int, 1)  :: Literal[int](1)
                    #   $binop_add338.7 = i + $const336.6  :: int64
                    #   del $const336.6
                    #   $344build_tuple.9 = build_tuple(items=[Var($binop_add338.7, jit_implementation.py:33), Var(j, jit_implementation.py:30)])  :: UniTuple(int64 x 2)
                    #   del $binop_add338.7
                    #   $346binary_subscr.10 = getitem(value=u.1.2, index=$344build_tuple.9, fn=<built-in function getitem>)  :: float64
                    #   del $344build_tuple.9
                    #   $const360.13 = const(int, 1)  :: Literal[int](1)
                    #   $binop_sub362.14 = i - $const360.13  :: int64
                    #   del $const360.13
                    #   $368build_tuple.16 = build_tuple(items=[Var($binop_sub362.14, jit_implementation.py:33), Var(j, jit_implementation.py:30)])  :: UniTuple(int64 x 2)
                    #   del $binop_sub362.14
                    #   $370binary_subscr.17 = getitem(value=u.1.2, index=$368build_tuple.16, fn=<built-in function getitem>)  :: float64
                    #   del $368build_tuple.16
                    #   $binop_add380.18 = $346binary_subscr.10 + $370binary_subscr.17  :: float64
                    #   del $370binary_subscr.17
                    #   del $346binary_subscr.10
                    #   $const390.22 = const(int, 1)  :: Literal[int](1)
                    #   $binop_add392.23 = j + $const390.22  :: int64
                    #   del $const390.22
                    #   $396build_tuple.24 = build_tuple(items=[Var(i, jit_implementation.py:29), Var($binop_add392.23, jit_implementation.py:33)])  :: UniTuple(int64 x 2)
                    #   del $binop_add392.23
                    #   $398binary_subscr.25 = getitem(value=u.1.2, index=$396build_tuple.24, fn=<built-in function getitem>)  :: float64
                    #   del $396build_tuple.24
                    #   $binop_add408.26 = $binop_add380.18 + $398binary_subscr.25  :: float64
                    #   del $binop_add380.18
                    #   del $398binary_subscr.25
                    #   $const418.30 = const(int, 1)  :: Literal[int](1)
                    #   $binop_sub420.31 = j - $const418.30  :: int64
                    #   del $const418.30
                    #   $424build_tuple.32 = build_tuple(items=[Var(i, jit_implementation.py:29), Var($binop_sub420.31, jit_implementation.py:33)])  :: UniTuple(int64 x 2)
                    #   del $binop_sub420.31
                    #   $426binary_subscr.33 = getitem(value=u.1.2, index=$424build_tuple.32, fn=<built-in function getitem>)  :: float64
                    #   del $424build_tuple.32
                    #   $binop_add436.34 = $binop_add408.26 + $426binary_subscr.33  :: float64
                    #   del $binop_add408.26
                    #   del $426binary_subscr.33
                    #   val = $const330.3 * $binop_add436.34  :: float64
                    #   del $const330.3
                    #   del $binop_add436.34

                    val = 0.25 * (u[i+1, j] + u[i-1, j] + u[i, j+1] + u[i, j-1])

                    # --- LINE 34 --- 
                    #   $446load_global.36 = global(abs: <built-in function abs>)  :: Function(<built-in function abs>)
                    #   $464build_tuple.41 = build_tuple(items=[Var(i, jit_implementation.py:29), Var(j, jit_implementation.py:30)])  :: UniTuple(int64 x 2)
                    #   $466binary_subscr.42 = getitem(value=u.1.2, index=$464build_tuple.41, fn=<built-in function getitem>)  :: float64
                    #   del $464build_tuple.41
                    #   $binop_sub478.44 = $466binary_subscr.42 - val  :: float64
                    #   del $466binary_subscr.42
                    #   $486call.45 = call $446load_global.36($binop_sub478.44, func=$446load_global.36, args=[Var($binop_sub478.44, jit_implementation.py:34)], kws=(), vararg=None, varkwarg=None, target=None)  :: (float64,) -> float64
                    #   del $binop_sub478.44
                    #   del $446load_global.36
                    #   $const500.48 = const(int, 1)  :: Literal[int](1)
                    #   $binop_sub502.49 = i - $const500.48  :: int64
                    #   del $const500.48
                    #   $const508.51 = const(int, 1)  :: Literal[int](1)
                    #   $binop_sub510.52 = j - $const508.51  :: int64
                    #   del $const508.51
                    #   $514build_tuple.53 = build_tuple(items=[Var($binop_sub502.49, jit_implementation.py:34), Var($binop_sub510.52, jit_implementation.py:34)])  :: UniTuple(int64 x 2)
                    #   del $binop_sub510.52
                    #   del $binop_sub502.49
                    #   delta[$514build_tuple.53] = $486call.45  :: (Array(float32, 2, 'C', False, aligned=True), UniTuple(int64, 2), float64) -> none
                    #   del $514build_tuple.53
                    #   del $486call.45

                    delta[i - 1, j - 1] = abs(u[i, j] - val)

                    # --- LINE 35 --- 
                    #   $528build_tuple.58 = build_tuple(items=[Var(i, jit_implementation.py:29), Var(j, jit_implementation.py:30)])  :: UniTuple(int64 x 2)
                    #   del j
                    #   u_new[$528build_tuple.58] = val  :: (Array(float64, 2, 'C', False, aligned=True), UniTuple(int64, 2), float64) -> none
                    #   del val
                    #   del $528build_tuple.58
                    #   jump 629

                    u_new[i, j] = val

                # --- LINE 36 --- 

                else:

                    # --- LINE 37 --- 
                    # label 536
                    #   del $328pred
                    #   $542build_tuple.6 = build_tuple(items=[Var(i, jit_implementation.py:29), Var(j, jit_implementation.py:30)])  :: UniTuple(int64 x 2)
                    #   $544binary_subscr.7 = getitem(value=u.1.2, index=$542build_tuple.6, fn=<built-in function getitem>)  :: float64
                    #   del $542build_tuple.6
                    #   $560build_tuple.11 = build_tuple(items=[Var(i, jit_implementation.py:29), Var(j, jit_implementation.py:30)])  :: UniTuple(int64 x 2)
                    #   del j
                    #   u_new[$560build_tuple.11] = $544binary_subscr.7  :: (Array(float64, 2, 'C', False, aligned=True), UniTuple(int64, 2), float64) -> none
                    #   del $560build_tuple.11
                    #   del $544binary_subscr.7
                    #   jump 629

                    u_new[i, j] = u[i, j]

# --- LINE 38 --- 



        # --- LINE 39 --- 
        # label 570
        #   del $phi254.2
        #   del $phi252.1
        #   del $252for_iter.4
        #   $570load_global.1 = global(np: <module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)  :: Module(<module 'numpy' from '/dtu/projects/02613_2025/conda/miniconda3/envs/02613/lib/python3.11/site-packages/numpy/__init__.py'>)
        #   $582load_attr.3 = getattr(value=$570load_global.1, attr=max)  :: Function(<function max at 0x7fe645db0900>)
        #   del $570load_global.1
        #   $598call.5 = call $582load_attr.3(delta, func=$582load_attr.3, args=[Var(delta, jit_implementation.py:26)], kws=(), vararg=None, varkwarg=None, target=None)  :: (Array(float32, 2, 'C', False, aligned=True),) -> float32
        #   del $582load_attr.3
        #   $610compare_op.7 = $598call.5 < atol  :: bool
        #   del $598call.5
        #   bool616 = global(bool: <class 'bool'>)  :: Function(<class 'bool'>)
        #   $616pred = call bool616($610compare_op.7, func=bool616, args=(Var($610compare_op.7, jit_implementation.py:39),), kws=(), vararg=None, varkwarg=None, target=None)  :: (bool,) -> bool
        #   del bool616
        #   del $610compare_op.7
        #   branch $616pred, 618, 622

        if np.max(delta) < atol:

            # --- LINE 40 --- 
            # label 618
            #   del u_new
            #   del interior_mask
            #   del delta
            #   del atol
            #   del SIZE
            #   del $phi210.0
            #   del $616pred
            #   jump 628

            break

# --- LINE 41 --- 



        # --- LINE 42 --- 
        # label 622
        #   del $616pred
        #   u.1.1 = u_new  :: array(float64, 2d, C)
        #   u.1.2 = u.1.1  :: array(float64, 2d, C)
        #   del u.1.1
        #   jump 210

        u = u_new

    # --- LINE 43 --- 
    # label 628
    #   del u_new
    #   del interior_mask
    #   del delta
    #   del atol
    #   del SIZE
    #   del $phi212.1
    #   del $phi210.0
    #   del $210for_iter.3
    #   $630return_value.1 = cast(value=u.1.2)  :: array(float64, 2d, C)
    #   del u.1.2
    #   return $630return_value.1

    return u


================================================================================
building_id, mean_temp, std_temp, pct_above_18, pct_below_15
10000, 14.014424933211888, 6.36752632564244, 30.95005605583885, 55.509746482948174
10009, 11.005652396716732, 5.8101556831084356, 16.68006834857775, 74.94848728515429
10014, 14.75193009196533, 7.03324369076397, 38.283015410924044, 52.78088801123756
10019, 14.743701716134165, 7.025614922683261, 38.16746523433129, 52.90180160934273
10029, 10.619285154916167, 6.314876665775762, 18.25563221896085, 74.51301795448481
10031, 12.51318582384655, 6.277255449021692, 24.065344842824736, 66.36419880387709
10051, 13.28955357745162, 5.999055519059092, 25.97693550756574, 62.85625091817247
10053, 11.370483100407576, 6.2601266681625765, 19.953279266572636, 72.40391396332863
10056, 14.220750276403168, 6.179434424979022, 31.767059586893048, 57.05634259759922
10064, 12.723481313402244, 6.964215891869853, 28.821521314153998, 62.72478822007606
10075, 15.166224017037354, 6.441751653068136, 39.20700468156523, 47.36330712834555
10079, 15.100201607408133, 7.312180977101958, 41.920340705609064, 49.411024536611336
10080, 15.783512887512721, 7.27864630996681, 46.39319689235924, 44.6845823005555
10082, 16.47390737489685, 6.709809538527609, 48.685221184391445, 40.51491157365701
10083, 15.640790914445997, 7.120730157682203, 44.86297793624036, 45.883370877030714
10084, 15.102074270033905, 7.1501991418807345, 40.915524770365906, 50.257491341665414
10085, 15.87049946206903, 7.192158219231621, 46.18868243958183, 44.71579125576671
10086, 14.39648234588067, 7.21416157054937, 37.272112131464475, 53.003383276945385
10087, 15.080522548841873, 7.272040292541299, 41.55495222974814, 49.86613056262741
10089, 13.997605462830432, 7.27269538798454, 35.486982589864105, 56.33091552159482
10090, 14.291024365408607, 6.61929856242199, 36.64966380709483, 51.19406445629492
10093, 14.101655660956553, 6.565555582006109, 33.402300842775745, 56.41722815607601
10094, 14.200629623441216, 6.759095710718212, 35.391014064466695, 54.899578613254526
10097, 14.355552724845044, 6.8632837814962615, 37.82068020105751, 51.29740844702657
10117, 15.466548410762591, 6.682412772576776, 44.11904941152852, 44.470375668147256
10119, 14.088694247815912, 6.75179233268298, 35.08269240436334, 54.69511888604032
10120, 15.282197635859792, 8.031604422927037, 46.168775716171105, 47.71627461636002
10124, 13.867496931559199, 7.032084287297501, 34.567923377694875, 56.056964522724826
10126, 13.398091973961767, 6.636394384390301, 29.664666431344866, 61.0854218143311
10128, 17.427819999759777, 6.70647312255798, 56.035537585784965, 34.875246049901584
10136, 15.426779142794716, 7.273125433385384, 44.32657419399488, 46.87830583210575
10144, 12.113399206141766, 6.126771250783459, 21.82306572274941, 68.88713159612392
10145, 10.656259141989603, 5.891989134465467, 16.581253361171743, 75.27284805921988
10150, 14.962135034072416, 7.4947955286288535, 41.201342655267695, 50.731598761196516
10161, 13.450087570018237, 7.030024129328571, 31.816561720327908, 59.462991564690505
10165, 13.054421812142907, 6.732270592227741, 29.06666666666667, 62.0559670781893
10167, 13.23299324092224, 6.814133520528549, 30.19433981132704, 60.84869495649855
10168, 13.19375022170868, 6.90048120622157, 30.325593764023466, 60.48332142204198
10174, 16.597992886654712, 6.962044118570441, 49.49972381678215, 41.26456953873907
10176, 16.67156878584345, 6.847860071592518, 49.85116977772832, 40.62995521183965
10177, 16.63916021584337, 6.779278824709296, 49.18810741345613, 40.86905303740194
10180, 16.50791311338475, 6.856438862991213, 48.27672499546424, 42.028640961955944
10182, 16.737557386394677, 6.319965316690362, 50.88382945626812, 37.516792759669094
10198, 14.43415937480247, 7.3434977621742625, 38.653566229985444, 53.19703586079132
10199, 17.248338653366467, 6.977478376814248, 53.92731147779697, 37.64288503670168
10200, 12.82886898441354, 7.257108998210316, 30.687041286705423, 61.64236921862351
10201, 15.955292880566933, 7.271600229327286, 47.07902884145348, 44.631578947368425
10202, 13.550261238916594, 7.495478204405982, 34.053720897866675, 58.632390268471944
10203, 16.810294831203965, 6.612831250995126, 51.25059741914928, 38.8621156603473
10204, 14.769256461362332, 7.06355869231654, 39.05145378195928, 51.7149045872535
10205, 11.453131548683062, 6.664613376513503, 23.189094768496, 69.36938928934684
10206, 10.128630347968484, 6.361093916255836, 17.555162399439197, 76.30937677337516
10207, 11.390967137405811, 6.612420415019361, 22.6568624203681, 69.80998752387578
10208, 9.492837884994715, 5.54139912425329, 11.955835013087036, 82.2958973896126
1021, 16.7590597579756, 6.3758058069148165, 48.8378360169777, 39.54341151673228
10215, 15.468180530494283, 7.149367693765227, 44.25560001650097, 46.594612433480464
10219, 14.158020024221413, 7.301565807428573, 37.30760536752769, 54.16640979799848
1022, 17.779230794685883, 6.219191387239606, 57.587707496311694, 31.818730108654304
1023, 18.9829505335164, 5.844710020154566, 65.25502667406829, 25.08115126595975
1024, 18.299376938555813, 5.930799110772854, 60.55468808089821, 28.900847646665177
10243, 16.61227164907362, 6.203242982279762, 48.99907877228128, 38.12712942518315
10244, 15.571282411625477, 6.621407016856514, 44.11107136469325, 43.50742264353425
10245, 16.657445328966347, 6.212222034851944, 49.21184271754304, 37.885353652861795
10247, 15.608452395897512, 6.619469866353402, 44.64632183735166, 43.109179238046536
10249, 16.12421188307119, 6.232454990426606, 46.00862272222035, 40.440904038532786
1025, 17.532590527606022, 6.331467964612625, 56.06442903030585, 33.836413574787024
10251, 12.184457078534075, 7.591157817518578, 29.19672100111698, 65.13791863084758
10252, 12.005015090087989, 7.6085864328726585, 27.50225597834261, 67.01571664912017
10255, 11.934656677498962, 7.222617362256839, 25.812656635809606, 67.94965459203019
10257, 15.249759371270322, 7.2881660337454175, 40.780947809760434, 51.190761889972755
10259, 12.656908061019774, 7.625314248794505, 30.467188399905137, 63.838635362672356
1026, 18.553935454537605, 5.712328935428424, 62.00223713646532, 26.76081282624907
10260, 13.673511329220718, 7.209978646940688, 33.694810224632064, 58.10130999906368
10262, 14.727206763387295, 7.445688406966796, 39.11851224011567, 53.110302305097136
10263, 16.753222776625684, 7.071712209244557, 49.445391395215374, 41.72883707783364
10265, 15.089803143684621, 7.165861469202987, 40.81789509952029, 50.531393284036994
10267, 16.271730057784506, 7.4746514653558105, 49.019994333091056, 43.11408966035504
10268, 16.941646250593816, 6.976383287657509, 51.37886614055055, 39.70634215891041
10269, 18.610283207211506, 6.786064152766652, 61.92841711274099, 30.378004981354323
1027, 14.676985763360175, 6.657039238104404, 35.69731874213417, 52.56665638726131
10276, 13.217626079620615, 6.96935519025279, 30.50948444897031, 61.70145922932758
10277, 13.550096711136785, 7.041852611490737, 32.585496717828185, 59.426896003228755
10279, 13.937326750183228, 7.007978399663842, 36.19777013650099, 54.9525893508388
10281, 13.028887383764001, 6.873808335383051, 31.31041666666667, 60.0
10282, 14.265771578748835, 6.788596438614596, 37.710554648699336, 51.45000520959956
10285, 13.983082126927627, 7.039433452713198, 35.42877267124494, 56.571579503433696
10288, 14.54518043348845, 6.820281765627239, 36.33972141476055, 53.63489286700778
10291, 12.23172645497346, 6.734703058257572, 25.189558372402615, 66.20941135613822
10292, 11.187827051838035, 6.443199380014914, 20.084955670270148, 72.55954998958309
10303, 17.632474918415117, 6.5799673198963795, 55.64972675807455, 34.511927746326776
10306, 14.279032916694065, 7.35667187865838, 37.12467892887721, 55.529804257329275
1031, 12.15617121707383, 6.847490319994702, 25.782240177439796, 66.4389258555133
10311, 16.35750876750877, 6.5808334621254065, 48.21373648472804, 40.959850474365346
10312, 16.438772204462843, 6.452659791950213, 47.67016142452987, 41.21555761595702
10315, 16.72205440713014, 6.3956045568723905, 49.81712463659383, 38.99465441245428
10316, 15.982477888174314, 6.601304184499307, 45.064834715305146, 43.49152960579714
10318, 17.504866424909196, 6.316725146072452, 56.77310570133839, 32.037095584360834
10323, 14.297830371596277, 7.365471117084579, 38.08446455505279, 53.31985494688873
10324, 16.412538030320903, 7.020851930938047, 49.356046187032106, 41.409719578733664
10330, 14.985248969829904, 7.181265911746068, 40.836486876700256, 49.58130062766911

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 24736438: <jit> in cluster <dcc> Done

Job <jit> was submitted from host <n-62-27-22> by user <s242777> in cluster <dcc> at Sat Apr 19 13:29:06 2025
Job was executed on host(s) <n-62-11-61>, in queue <hpc>, as user <s242777> in cluster <dcc> at Sat Apr 19 13:29:06 2025
</zhome/2c/a/213957> was used as the home directory.
</zhome/2c/a/213957/malaka_performance/source_MMB/ex7> was used as the working directory.
Started at Sat Apr 19 13:29:06 2025
Terminated at Sat Apr 19 13:35:46 2025
Results reported at Sat Apr 19 13:35:46 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
#!/bin/bash
#BSUB -J jit
#BSUB -q hpc
#BSUB -W 3:00
#BSUB -n 1
#BSUB -R "rusage[mem=1GB]"
#BSUB -R "select[model == XeonGold6226R]"
#BSUB -o output/jit_image_%J.out
#BSUB -e output/jit_image_%J.err

source /dtu/projects/02613_2025/conda/conda_init.sh
conda activate 02613

time python jit_implementation.py 100
------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   397.06 sec.
    Max Memory :                                 523 MB
    Average Memory :                             470.60 MB
    Total Requested Memory :                     1024.00 MB
    Delta Memory :                               501.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                5
    Run time :                                   465 sec.
    Turnaround time :                            400 sec.

The output (if any) is above this job summary.



PS:

Read file <output/jit_image_24736438.err> for stderr output of this job.

